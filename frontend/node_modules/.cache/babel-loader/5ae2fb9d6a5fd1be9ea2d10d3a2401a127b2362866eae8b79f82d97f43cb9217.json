{"ast":null,"code":"import { makeAutoObservable } from 'mobx';\nclass UserStore {\n  constructor() {\n    this.user = null;\n    this.error = null;\n    // Список пользователей с логинами и паролями\n    this.users = [{\n      username: 'admin',\n      password: 'admin'\n    }, {\n      username: 'user',\n      password: 'user'\n    }];\n    makeAutoObservable(this);\n\n    // Загружаем пользователя из localStorage при инициализации\n    const savedUser = localStorage.getItem('user');\n    if (savedUser) {\n      this.user = JSON.parse(savedUser);\n    }\n  }\n  // Функция входа\n  login(username, password) {\n    const foundUser = this.users.find(u => u.username === username && u.password === password);\n    if (foundUser) {\n      this.user = {\n        username: foundUser.username\n      };\n      this.error = null; // Сбрасываем ошибку\n      localStorage.setItem('user', JSON.stringify(this.user)); // Сохраняем пользователя\n    } else {\n      this.error = 'Неверное имя пользователя или пароль';\n    }\n  }\n\n  // Функция выхода\n  logout() {\n    this.user = null;\n    this.error = null; // Сбрасываем ошибку\n    localStorage.removeItem('user'); // Удаляем пользователя из localStorage\n  }\n}\nconst userStore = new UserStore();\nexport default userStore;","map":{"version":3,"names":["makeAutoObservable","UserStore","constructor","user","error","users","username","password","savedUser","localStorage","getItem","JSON","parse","login","foundUser","find","u","setItem","stringify","logout","removeItem","userStore"],"sources":["D:/Education/react/meeting-scheduler/frontend/src/stores/UserStore.js"],"sourcesContent":["import { makeAutoObservable } from 'mobx';\r\n\r\nclass UserStore {\r\n  user = null;\r\n  error = null;\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n\r\n    // Загружаем пользователя из localStorage при инициализации\r\n    const savedUser = localStorage.getItem('user');\r\n    if (savedUser) {\r\n      this.user = JSON.parse(savedUser);\r\n    }\r\n  }\r\n\r\n  // Список пользователей с логинами и паролями\r\n  users = [\r\n    { username: 'admin', password: 'admin' },\r\n    { username: 'user', password: 'user' },\r\n  ];\r\n\r\n  // Функция входа\r\n  login(username, password) {\r\n    const foundUser = this.users.find(\r\n      (u) => u.username === username && u.password === password\r\n    );\r\n\r\n    if (foundUser) {\r\n      this.user = { username: foundUser.username };\r\n      this.error = null; // Сбрасываем ошибку\r\n      localStorage.setItem('user', JSON.stringify(this.user)); // Сохраняем пользователя\r\n    } else {\r\n      this.error = 'Неверное имя пользователя или пароль';\r\n    }\r\n  }\r\n\r\n  // Функция выхода\r\n  logout() {\r\n    this.user = null;\r\n    this.error = null; // Сбрасываем ошибку\r\n    localStorage.removeItem('user'); // Удаляем пользователя из localStorage\r\n  }\r\n}\r\n\r\nconst userStore = new UserStore();\r\nexport default userStore;\r\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,MAAM;AAEzC,MAAMC,SAAS,CAAC;EAIdC,WAAWA,CAAA,EAAG;IAAA,KAHdC,IAAI,GAAG,IAAI;IAAA,KACXC,KAAK,GAAG,IAAI;IAYZ;IAAA,KACAC,KAAK,GAAG,CACN;MAAEC,QAAQ,EAAE,OAAO;MAAEC,QAAQ,EAAE;IAAQ,CAAC,EACxC;MAAED,QAAQ,EAAE,MAAM;MAAEC,QAAQ,EAAE;IAAO,CAAC,CACvC;IAbCP,kBAAkB,CAAC,IAAI,CAAC;;IAExB;IACA,MAAMQ,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC9C,IAAIF,SAAS,EAAE;MACb,IAAI,CAACL,IAAI,GAAGQ,IAAI,CAACC,KAAK,CAACJ,SAAS,CAAC;IACnC;EACF;EAQA;EACAK,KAAKA,CAACP,QAAQ,EAAEC,QAAQ,EAAE;IACxB,MAAMO,SAAS,GAAG,IAAI,CAACT,KAAK,CAACU,IAAI,CAC9BC,CAAC,IAAKA,CAAC,CAACV,QAAQ,KAAKA,QAAQ,IAAIU,CAAC,CAACT,QAAQ,KAAKA,QACnD,CAAC;IAED,IAAIO,SAAS,EAAE;MACb,IAAI,CAACX,IAAI,GAAG;QAAEG,QAAQ,EAAEQ,SAAS,CAACR;MAAS,CAAC;MAC5C,IAAI,CAACF,KAAK,GAAG,IAAI,CAAC,CAAC;MACnBK,YAAY,CAACQ,OAAO,CAAC,MAAM,EAAEN,IAAI,CAACO,SAAS,CAAC,IAAI,CAACf,IAAI,CAAC,CAAC,CAAC,CAAC;IAC3D,CAAC,MAAM;MACL,IAAI,CAACC,KAAK,GAAG,sCAAsC;IACrD;EACF;;EAEA;EACAe,MAAMA,CAAA,EAAG;IACP,IAAI,CAAChB,IAAI,GAAG,IAAI;IAChB,IAAI,CAACC,KAAK,GAAG,IAAI,CAAC,CAAC;IACnBK,YAAY,CAACW,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;EACnC;AACF;AAEA,MAAMC,SAAS,GAAG,IAAIpB,SAAS,CAAC,CAAC;AACjC,eAAeoB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}