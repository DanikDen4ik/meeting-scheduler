{"ast":null,"code":"const express = require('express');\nconst cors = require('cors');\nconst app = express();\nconst PORT = 5000;\napp.use(cors());\napp.use(express.json());\nlet bookings = [];\n\n// Получение встреч\napp.get('/bookings', (req, res) => {\n  res.json(bookings);\n});\n\n// Создание новой встречи с логированием ошибок\napp.post('/bookings', (req, res) => {\n  const {\n    title,\n    start,\n    end\n  } = req.body;\n\n  // Проверка на обязательные поля\n  if (!title || !start || !end) {\n    console.error('Ошибка: Заполнены не все поля.');\n    return res.status(400).json({\n      error: 'Все поля обязательны!'\n    });\n  }\n  try {\n    const newBooking = {\n      id: bookings.length + 1,\n      title,\n      start: new Date(start).toISOString(),\n      end: new Date(end).toISOString()\n    };\n    bookings.push(newBooking);\n    console.log('Создана новая встреча:', newBooking);\n    res.status(201).json(newBooking);\n  } catch (error) {\n    console.error('Ошибка при создании встречи:', error);\n    res.status(500).json({\n      error: 'Ошибка на сервере!'\n    });\n  }\n});\n\n// Запуск сервера\napp.listen(PORT, () => {\n  console.log(`Сервер работает на http://localhost:${PORT}`);\n});","map":{"version":3,"names":["express","require","cors","app","PORT","use","json","bookings","get","req","res","post","title","start","end","body","console","error","status","newBooking","id","length","Date","toISOString","push","log","listen"],"sources":["D:/Education/react/meeting-scheduler/frontend/src/services/api.js"],"sourcesContent":["const express = require('express');\r\nconst cors = require('cors');\r\n\r\nconst app = express();\r\nconst PORT = 5000;\r\n\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\nlet bookings = [];\r\n\r\n// Получение встреч\r\napp.get('/bookings', (req, res) => {\r\n  res.json(bookings);\r\n});\r\n\r\n// Создание новой встречи с логированием ошибок\r\napp.post('/bookings', (req, res) => {\r\n  const { title, start, end } = req.body;\r\n\r\n  // Проверка на обязательные поля\r\n  if (!title || !start || !end) {\r\n    console.error('Ошибка: Заполнены не все поля.');\r\n    return res.status(400).json({ error: 'Все поля обязательны!' });\r\n  }\r\n\r\n  try {\r\n    const newBooking = {\r\n      id: bookings.length + 1,\r\n      title,\r\n      start: new Date(start).toISOString(),\r\n      end: new Date(end).toISOString(),\r\n    };\r\n\r\n    bookings.push(newBooking);\r\n    console.log('Создана новая встреча:', newBooking);\r\n    res.status(201).json(newBooking);\r\n  } catch (error) {\r\n    console.error('Ошибка при создании встречи:', error);\r\n    res.status(500).json({ error: 'Ошибка на сервере!' });\r\n  }\r\n});\r\n\r\n// Запуск сервера\r\napp.listen(PORT, () => {\r\n  console.log(`Сервер работает на http://localhost:${PORT}`);\r\n});\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAME,GAAG,GAAGH,OAAO,CAAC,CAAC;AACrB,MAAMI,IAAI,GAAG,IAAI;AAEjBD,GAAG,CAACE,GAAG,CAACH,IAAI,CAAC,CAAC,CAAC;AACfC,GAAG,CAACE,GAAG,CAACL,OAAO,CAACM,IAAI,CAAC,CAAC,CAAC;AAEvB,IAAIC,QAAQ,GAAG,EAAE;;AAEjB;AACAJ,GAAG,CAACK,GAAG,CAAC,WAAW,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACjCA,GAAG,CAACJ,IAAI,CAACC,QAAQ,CAAC;AACpB,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACQ,IAAI,CAAC,WAAW,EAAE,CAACF,GAAG,EAAEC,GAAG,KAAK;EAClC,MAAM;IAAEE,KAAK;IAAEC,KAAK;IAAEC;EAAI,CAAC,GAAGL,GAAG,CAACM,IAAI;;EAEtC;EACA,IAAI,CAACH,KAAK,IAAI,CAACC,KAAK,IAAI,CAACC,GAAG,EAAE;IAC5BE,OAAO,CAACC,KAAK,CAAC,gCAAgC,CAAC;IAC/C,OAAOP,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACZ,IAAI,CAAC;MAAEW,KAAK,EAAE;IAAwB,CAAC,CAAC;EACjE;EAEA,IAAI;IACF,MAAME,UAAU,GAAG;MACjBC,EAAE,EAAEb,QAAQ,CAACc,MAAM,GAAG,CAAC;MACvBT,KAAK;MACLC,KAAK,EAAE,IAAIS,IAAI,CAACT,KAAK,CAAC,CAACU,WAAW,CAAC,CAAC;MACpCT,GAAG,EAAE,IAAIQ,IAAI,CAACR,GAAG,CAAC,CAACS,WAAW,CAAC;IACjC,CAAC;IAEDhB,QAAQ,CAACiB,IAAI,CAACL,UAAU,CAAC;IACzBH,OAAO,CAACS,GAAG,CAAC,wBAAwB,EAAEN,UAAU,CAAC;IACjDT,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACZ,IAAI,CAACa,UAAU,CAAC;EAClC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpDP,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACZ,IAAI,CAAC;MAAEW,KAAK,EAAE;IAAqB,CAAC,CAAC;EACvD;AACF,CAAC,CAAC;;AAEF;AACAd,GAAG,CAACuB,MAAM,CAACtB,IAAI,EAAE,MAAM;EACrBY,OAAO,CAACS,GAAG,CAAC,uCAAuCrB,IAAI,EAAE,CAAC;AAC5D,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}